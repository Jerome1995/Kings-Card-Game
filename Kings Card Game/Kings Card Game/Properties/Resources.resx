<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Deck Added" xml:space="preserve">
    <value>Deck Added</value>
  </data>
  <data name="Deck Added Description" xml:space="preserve">
    <value> Decks have been added.</value>
  </data>
  <data name="Deck Removed Heading" xml:space="preserve">
    <value>Deck Removed</value>
  </data>
  <data name="Deck Removed Confirm" xml:space="preserve">
    <value> Decks have been removed.</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error!</value>
  </data>
  <data name="Deck Removed Fail" xml:space="preserve">
    <value> Decks could not be removed as the number of decks to be removed was greater than the number of decks available.</value>
  </data>
  <data name="Undo Exclusion Header" xml:space="preserve">
    <value>Exclusion Undone</value>
  </data>
  <data name="Card Identifier" xml:space="preserve">
    <value>The card </value>
  </data>
  <data name="Undo Exclusion Confirm" xml:space="preserve">
    <value> has been added back to the deck</value>
  </data>
  <data name="Undo Exclusion Fail" xml:space="preserve">
    <value> counld not be added back to the deck</value>
  </data>
  <data name="Card Excluded Header" xml:space="preserve">
    <value>Card Excluded</value>
  </data>
  <data name="Exclude Card Part1" xml:space="preserve">
    <value>All occurences of </value>
  </data>
  <data name="Exclude Card Part2" xml:space="preserve">
    <value> have been removed.</value>
  </data>
  <data name="Exclude Card Fail" xml:space="preserve">
    <value>could not be removed.</value>
  </data>
  <data name="Game Reset Header" xml:space="preserve">
    <value>Game Reset</value>
  </data>
  <data name="Game Reset Confirm" xml:space="preserve">
    <value>The game and the decks have been reset</value>
  </data>
  <data name="Game Reset Fail" xml:space="preserve">
    <value>The game has not been reset</value>
  </data>
  <data name="Valid Name Fail" xml:space="preserve">
    <value>A valid name has not been entered! Try Again!</value>
  </data>
  <data name="Valid Number Of Decks Fail" xml:space="preserve">
    <value>A valid number of Decks has not been entered! Please Try Again!</value>
  </data>
  <data name="Valid Name" xml:space="preserve">
    <value>Please enter a valid name in the text box!</value>
  </data>
  <data name="Player Removed Header" xml:space="preserve">
    <value>Player Removed</value>
  </data>
  <data name="Player Identifier" xml:space="preserve">
    <value>The player </value>
  </data>
  <data name="Player Removed Confirm" xml:space="preserve">
    <value> has been removed from the game</value>
  </data>
  <data name="Player Removed Fail" xml:space="preserve">
    <value> could not be removed.</value>
  </data>
  <data name="Change Player Name Message" xml:space="preserve">
    <value>Both text boxes need to have values! Please try again!</value>
  </data>
  <data name="Change Player Name Header" xml:space="preserve">
    <value>Player Name Changed!</value>
  </data>
  <data name="Changed Confirm" xml:space="preserve">
    <value> has been changed to </value>
  </data>
  <data name="Changed Fail" xml:space="preserve">
    <value>could not be changed.</value>
  </data>
  <data name="Player Added" xml:space="preserve">
    <value>Player Added</value>
  </data>
  <data name="Was Added" xml:space="preserve">
    <value> has been added.</value>
  </data>
  <data name="PNG" xml:space="preserve">
    <value>.png</value>
  </data>
</root>